aplicativo
// Aplicativo simples para agendamento de salão de beleza
// Agora com dois botões: um para Cliente e outro para Salão
// Adicionado: QR Code de pagamento de 5% adiantado, notificação sonora, aceitação/rejeição de agendamento e envio de mensagem WhatsApp
// NOVO: Página de controle para salões cadastrados, com agendamentos por dia/semana/mês, valores recebidos, gastos e lucros
// NOVÍSSIMO: Página de controle do aplicativo (admin) para ver agendas de todos os salões, valores, horários e excluir salões ou clientes
// ATUALIZAÇÃO: Cada salão pode adicionar uma foto de propaganda, cada serviço pode ter uma foto, é possível mostrar todos os funcionários e ocultar o salão para não receber agendamentos.
// NOVO: O aplicativo pode usar o localizador para mostrar os salões cadastrados na cidade em que o usuário se encontra.
// ATUALIZAÇÃO: Adicionada uma aba de procura para buscar salões por nome, serviço, cidade ou funcionário.
// ATUALIZAÇÃO: Agora é possível procurar salões por funções: masculino, feminino, corte de cabelo, cílios, unha, escova, massagem, depilação, unha em gel.
// ATUALIZAÇÃO: Clientes de outras cidades podem agendar buscando o salão pela aba de procura.

class Salao {
    constructor(nome, endereco, whatsapp, cidade = null, latitude = null, longitude = null) {
        this.nome = nome;
        this.endereco = endereco;
        this.whatsapp = whatsapp;
        this.servicos = [];
        this.funcionarios = [];
        this.horarios = [];
        this.agendamentosPendentes = [];
        this.gastos = []; // [{descricao, valor, data}]
        this.fotoPropaganda = null; // URL ou base64 da foto de propaganda do salão
        this.oculto = false; // Se true, o salão não aparece para clientes/agendamento
        this.cidade = cidade; // Cidade do salão
        this.latitude = latitude; // Latitude do salão (opcional)
        this.longitude = longitude; // Longitude do salão (opcional)
    }

    adicionarServico(servico) {
        this.servicos.push(servico);
    }

    adicionarFuncionario(funcionario) {
        this.funcionarios.push(funcionario);
    }

    adicionarHorario(horario) {
        this.horarios.push(horario);
    }

    adicionarGasto(descricao, valor, data) {
        this.gastos.push({ descricao, valor, data });
    }

    setFotoPropaganda(urlOuBase64) {
        this.fotoPropaganda = urlOuBase64;
    }

    ocultarSalao() {
        this.oculto = true;
    }

    exibirSalao() {
        this.oculto = false;
    }

    setLocalizacao(cidade, latitude = null, longitude = null) {
        this.cidade = cidade;
        this.latitude = latitude;
        this.longitude = longitude;
    }
}

class Servico {
    constructor(nome, preco, duracao, funcoes = []) {
        this.nome = nome;
        this.preco = preco;
        this.duracao = duracao; // em minutos
        this.foto = null; // URL ou base64 da foto do serviço
        this.funcoes = funcoes; // Array de funções (ex: ["masculino", "corte de cabelo"])
    }

    setFoto(urlOuBase64) {
        this.foto = urlOuBase64;
    }
}

class Funcionario {
    constructor(nome) {
        this.nome = nome;
        this.servicos = [];
    }

    adicionarServico(servico) {
        this.servicos.push(servico);
    }
}

class Agendamento {
    constructor(cliente, clienteWhatsapp, salao, servico, funcionario, data, horario) {
        this.cliente = cliente;
        this.clienteWhatsapp = clienteWhatsapp;
        this.salao = salao;
        this.servico = servico;
        this.funcionario = funcionario;
        this.data = data;
        this.horario = horario;
        this.status = "PENDENTE"; // PENDENTE, ACEITO, REJEITADO
        this.valorPagoAdiantado = (servico.preco * 0.05);
        this.valorRestante = (servico.preco * 0.95);
    }
}

class SistemaAgendamento {
    constructor() {
        this.saloes = [];
        this.agendamentos = [];
        // QR Code único para todos os salões
        this.qrCodePagamento = "https://exemplo.com/qrcode-pagamento-5porcento.png";
        this.infoPagamento = "É necessário pagar 5% do valor do serviço no momento do agendamento via QR Code abaixo. Os outros 95% serão pagos no salão agendado.";
        // Funções disponíveis para busca
        this.funcoesDisponiveis = [
            "masculino",
            "feminino",
            "corte de cabelo",
            "cílios",
            "unha",
            "escova",
            "massagem",
            "depilação",
            "unha em gel"
        ];
    }

    cadastrarSalao(nome, endereco, whatsapp, cidade = null, latitude = null, longitude = null) {
        const salao = new Salao(nome, endereco, whatsapp, cidade, latitude, longitude);
        this.saloes.push(salao);
        return salao;
    }

    listarSaloes() {
        // Só retorna salões não ocultos
        return this.saloes.filter(s => !s.oculto);
    }

    listarSaloesPorCidade(cidade) {
        // Retorna salões não ocultos na cidade informada (case insensitive)
        return this.saloes.filter(s => !s.oculto && s.cidade && s.cidade.toLowerCase() === cidade.toLowerCase());
    }

    listarSaloesProximos(latitude, longitude, raioKm = 10) {
        // Retorna salões não ocultos dentro de um raio (em km) da localização informada
        // Se o salão não tem latitude/longitude, não entra no resultado
        function distanciaEmKm(lat1, lon1, lat2, lon2) {
            // Haversine
            const R = 6371;
            const dLat = (lat2 - lat1) * Math.PI / 180;
            const dLon = (lon2 - lon1) * Math.PI / 180;
            const a = Math.sin(dLat/2) * Math.sin(dLat/2) +
                      Math.cos(lat1 * Math.PI / 180) * Math.cos(lat2 * Math.PI / 180) *
                      Math.sin(dLon/2) * Math.sin(dLon/2);
            const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a));
            return R * c;
        }
        return this.saloes.filter(s => 
            !s.oculto &&
            s.latitude != null && s.longitude != null &&
            distanciaEmKm(latitude, longitude, s.latitude, s.longitude) <= raioKm
        );
    }

    listarTodosSaloes() {
        // Retorna todos, inclusive ocultos (para admin)
        return this.saloes;
    }

    agendarServico(cliente, clienteWhatsapp, salao, servico, funcionario, data, horario) {
        if (salao.oculto) {
            throw new Error("Este salão está temporariamente indisponível para agendamentos.");
        }
        // Verifica se o horário está disponível
        const disponivel = !this.agendamentos.some(a =>
            a.salao === salao &&
            a.funcionario === funcionario &&
            a.data === data &&
            a.horario === horario &&
            a.status === "ACEITO"
        );
        if (!disponivel) {
            throw new Error("Horário indisponível para este funcionário.");
        }
        const agendamento = new Agendamento(cliente, clienteWhatsapp, salao, servico, funcionario, data, horario);
        this.agendamentos.push(agendamento);
        salao.agendamentosPendentes.push(agendamento);

        // Simula pagamento de 5% via QR Code
        this.mostrarPagamentoQRCode(servico);

        // Simula bip sonoro no app do salão
        this.tocarBipSalao(salao);

        // Mostra notificação para o proprietário do salão
        this.notificarSalaoProprietario(salao, agendamento);

        return agendamento;
    }

    mostrarPagamentoQRCode(servico) {
        console.log("\n--- PAGAMENTO ANTECIPADO ---");
        console.log(this.infoPagamento);
        console.log(`Valor do serviço: R$${servico.preco}`);
        const valorAdiantado = (servico.preco * 0.05).toFixed(2);
        console.log(`Valor a pagar agora (5%): R$${valorAdiantado}`);
        console.log(`QR Code para pagamento: ${this.qrCodePagamento}`);
        console.log("----------------------------\n");
        // Aqui, em app real, exibiria o QR code na tela
    }

    tocarBipSalao(salao) {
        // Simula bip sonoro no app do salão
        console.log(`\u0007[BIP] Nova solicitação de agendamento para o salão ${salao.nome}!`);
    }

    notificarSalaoProprietario(salao, agendamento) {
        console.log("\n--- NOTIFICAÇÃO PARA O SALÃO ---");
        console.log(`Solicitação de agendamento recebida:`);
        this.mostrarDetalhesAgendamento(agendamento);
        console.log("Deseja aceitar ou rejeitar este agendamento?");
        console.log("1 - Aceitar");
        console.log("2 - Rejeitar");
        // Simulação: proprietário aceita (poderia ser por prompt)
        const acao = 1; // 1 para aceitar, 2 para rejeitar
        if (acao === 1) {
            this.aceitarAgendamento(agendamento);
        } else {
            this.rejeitarAgendamento(agendamento);
        }
    }

    aceitarAgendamento(agendamento) {
        agendamento.status = "ACEITO";
        console.log("Agendamento ACEITO!");
        this.enviarWhatsapp(agendamento, true);
    }

    rejeitarAgendamento(agendamento) {
        agendamento.status = "REJEITADO";
        console.log("Agendamento REJEITADO!");
        this.enviarWhatsapp(agendamento, false);
    }

    enviarWhatsapp(agendamento, aceito) {
        // Simula envio de mensagem WhatsApp para cliente e salão
        const msg = aceito
            ? `Seu agendamento foi ACEITO!\n${this.formatarDetalhesAgendamento(agendamento)}`
            : `Seu agendamento foi REJEITADO.\n${this.formatarDetalhesAgendamento(agendamento)}`;
        const msgSalao = aceito
            ? `Você ACEITOU o agendamento:\n${this.formatarDetalhesAgendamento(agendamento)}`
            : `Você REJEITOU o agendamento:\n${this.formatarDetalhesAgendamento(agendamento)}`;
        console.log(`\n[WhatsApp para Cliente (${agendamento.clienteWhatsapp})]:\n${msg}`);
        console.log(`[WhatsApp para Salão (${agendamento.salao.whatsapp})]:\n${msgSalao}`);
        // Em app real, integraria com API do WhatsApp
    }

    mostrarDetalhesAgendamento(agendamento) {
        console.log(`Cliente: ${agendamento.cliente}`);
        console.log(`WhatsApp Cliente: ${agendamento.clienteWhatsapp}`);
        console.log(`Serviço: ${agendamento.servico.nome}`);
        if (agendamento.servico.foto) {
            console.log(`Foto do Serviço: ${agendamento.servico.foto}`);
        }
        if (agendamento.servico.funcoes && agendamento.servico.funcoes.length > 0) {
            console.log(`Funções: ${agendamento.servico.funcoes.join(", ")}`);
        }
        console.log(`Funcionário: ${agendamento.funcionario.nome}`);
        console.log(`Data: ${agendamento.data}`);
        console.log(`Horário: ${agendamento.horario}`);
        console.log(`Valor: R$${agendamento.servico.preco}`);
        console.log(`Status: ${agendamento.status}`);
    }

    formatarDetalhesAgendamento(agendamento) {
        return `Cliente: ${agendamento.cliente}
WhatsApp Cliente: ${agendamento.clienteWhatsapp}
Salão: ${agendamento.salao.nome}
Endereço: ${agendamento.salao.endereco}
Serviço: ${agendamento.servico.nome}
${agendamento.servico.foto ? "Foto do Serviço: " + agendamento.servico.foto : ""}
${agendamento.servico.funcoes && agendamento.servico.funcoes.length > 0 ? "Funções: " + agendamento.servico.funcoes.join(", ") : ""}
Funcionário: ${agendamento.funcionario.nome}
Data: ${agendamento.data}
Horário: ${agendamento.horario}
Valor: R$${agendamento.servico.preco}
Status: ${agendamento.status}`;
    }

    listarAgendamentos() {
        return this.agendamentos;
    }

    // NOVO: Página de controle do salão
    paginaControleSalao(salao) {
        console.log(`\n=== Página de Controle do Salão: ${salao.nome} ===`);
        // Foto de propaganda do salão
        if (salao.fotoPropaganda) {
            console.log(`Foto de Propaganda do Salão: ${salao.fotoPropaganda}`);
        } else {
            console.log("Nenhuma foto de propaganda cadastrada.");
        }
        // Status de ocultação
        console.log(`Status de Atendimento: ${salao.oculto ? "OCULTO (não recebe agendamentos)" : "VISÍVEL (recebendo agendamentos)"}`);
        // Opções para ocultar/exibir salão
        console.log("Opções:");
        console.log("1 - Ocultar salão (parar de receber agendamentos)");
        console.log("2 - Exibir salão (voltar a receber agendamentos)");
        // Em app real, botões para chamar salao.ocultarSalao() ou salao.exibirSalao()

        // Mostrar todos os funcionários
        console.log("\nFuncionários do Salão:");
        if (salao.funcionarios.length === 0) {
            console.log("- Nenhum funcionário cadastrado.");
        } else {
            salao.funcionarios.forEach((f, i) => {
                console.log(`- [${i + 1}] ${f.nome}`);
            });
        }

        // Mostrar todos os serviços com foto e funções
        console.log("\nServiços do Salão:");
        if (salao.servicos.length === 0) {
            console.log("- Nenhum serviço cadastrado.");
        } else {
            salao.servicos.forEach((s, i) => {
                console.log(`- [${i + 1}] ${s.nome} | R$${s.preco} | ${s.duracao}min`);
                if (s.foto) {
                    console.log(`    Foto do Serviço: ${s.foto}`);
                }
                if (s.funcoes && s.funcoes.length > 0) {
                    console.log(`    Funções: ${s.funcoes.join(", ")}`);
                }
            });
        }

        // Filtra agendamentos ACEITOS deste salão
        const ags = this.agendamentos.filter(a => a.salao === salao && a.status === "ACEITO");

        // Agrupa por data
        const agPorDia = {};
        const agPorSemana = {};
        const agPorMes = {};

        ags.forEach(a => {
            // Data no formato YYYY-MM-DD
            const data = a.data;
            // Semana: YYYY-WW
            const semana = this.getAnoSemana(a.data);
            // Mês: YYYY-MM
            const mes = a.data.slice(0, 7);

            if (!agPorDia[data]) agPorDia[data] = [];
            agPorDia[data].push(a);

            if (!agPorSemana[semana]) agPorSemana[semana] = [];
            agPorSemana[semana].push(a);

            if (!agPorMes[mes]) agPorMes[mes] = [];
            agPorMes[mes].push(a);
        });

        // Mostra agendamentos por dia
        console.log("\nAgendamentos por Dia:");
        Object.keys(agPorDia).forEach(data => {
            console.log(`- ${data}: ${agPorDia[data].length} agendamento(s)`);
        });

        // Mostra agendamentos por semana
        console.log("\nAgendamentos por Semana:");
        Object.keys(agPorSemana).forEach(semana => {
            console.log(`- Semana ${semana}: ${agPorSemana[semana].length} agendamento(s)`);
        });

        // Mostra agendamentos por mês
        console.log("\nAgendamentos por Mês:");
        Object.keys(agPorMes).forEach(mes => {
            console.log(`- ${mes}: ${agPorMes[mes].length} agendamento(s)`);
        });

        // Valores recebidos (somente dos agendamentos ACEITOS)
        const valorTotal = ags.reduce((soma, a) => soma + a.servico.preco, 0);
        const valorAdiantado = ags.reduce((soma, a) => soma + a.valorPagoAdiantado, 0);
        const valorRestante = ags.reduce((soma, a) => soma + a.valorRestante, 0);

        console.log(`\nValores Recebidos:`);
        console.log(`- Total (serviços): R$${valorTotal.toFixed(2)}`);
        console.log(`- Adiantado (5%): R$${valorAdiantado.toFixed(2)}`);
        console.log(`- Restante (95%): R$${valorRestante.toFixed(2)}`);

        // Gastos do salão
        const gastosTotal = salao.gastos.reduce((soma, g) => soma + g.valor, 0);
        console.log(`\nGastos do Salão:`);
        if (salao.gastos.length === 0) {
            console.log("- Nenhum gasto cadastrado.");
        } else {
            salao.gastos.forEach(g => {
                console.log(`- ${g.data}: ${g.descricao} - R$${g.valor.toFixed(2)}`);
            });
        }
        console.log(`Total de Gastos: R$${gastosTotal.toFixed(2)}`);

        // Lucro = valorTotal - gastosTotal
        const lucro = valorTotal - gastosTotal;
        console.log(`\nLucro do Salão: R$${lucro.toFixed(2)}`);
        console.log("====================================\n");
    }

    // NOVÍSSIMO: Página de controle do aplicativo (admin)
    paginaControleAdmin() {
        console.log("\n=== Página de Controle do Aplicativo (Admin) ===");
        // Listar todos os salões (inclusive ocultos)
        if (this.saloes.length === 0) {
            console.log("Nenhum salão cadastrado.");
            return;
        }
        this.saloes.forEach((salao, idx) => {
            console.log(`\n[${idx + 1}] Salão: ${salao.nome} | Endereço: ${salao.endereco} | WhatsApp: ${salao.whatsapp}`);
            if (salao.cidade) {
                console.log(`  Cidade: ${salao.cidade}`);
            }
            if (salao.latitude != null && salao.longitude != null) {
                console.log(`  Localização: (${salao.latitude}, ${salao.longitude})`);
            }
            console.log(`  Status: ${salao.oculto ? "OCULTO" : "VISÍVEL"}`);
            if (salao.fotoPropaganda) {
                console.log(`  Foto de Propaganda: ${salao.fotoPropaganda}`);
            }
            // Agendamentos deste salão
            const ags = this.agendamentos.filter(a => a.salao === salao);
            if (ags.length === 0) {
                console.log("  - Nenhum agendamento.");
            } else {
                ags.forEach((a, i) => {
                    console.log(`  - [${i + 1}] ${a.data} ${a.horario} | Cliente: ${a.cliente} | Serviço: ${a.servico.nome} | Funcionário: ${a.funcionario.nome} | Status: ${a.status} | Valor: R$${a.servico.preco}`);
                });
            }
            // Valores recebidos (apenas ACEITOS)
            const agsAceitos = ags.filter(a => a.status === "ACEITO");
            const valorTotal = agsAceitos.reduce((soma, a) => soma + a.servico.preco, 0);
            const valorAdiantado = agsAceitos.reduce((soma, a) => soma + a.valorPagoAdiantado, 0);
            const valorRestante = agsAceitos.reduce((soma, a) => soma + a.valorRestante, 0);
            console.log(`  - Valores Recebidos: Total: R$${valorTotal.toFixed(2)} | Adiantado (5%): R$${valorAdiantado.toFixed(2)} | Restante (95%): R$${valorRestante.toFixed(2)}`);
        });

        // Listar todos os clientes únicos
        const clientes = {};
        this.agendamentos.forEach(a => {
            if (!clientes[a.clienteWhatsapp]) {
                clientes[a.clienteWhatsapp] = {
                    nome: a.cliente,
                    whatsapp: a.clienteWhatsapp
                };
            }
        });
        const clientesArr = Object.values(clientes);
        if (clientesArr.length === 0) {
            console.log("\nNenhum cliente com agendamento.");
        } else {
            console.log("\nClientes com agendamento:");
            clientesArr.forEach((c, i) => {
                console.log(`  [${i + 1}] ${c.nome} | WhatsApp: ${c.whatsapp}`);
            });
        }

        // Opções de exclusão
        console.log("\nOpções de exclusão:");
        console.log("1 - Excluir Salão");
        console.log("2 - Excluir Cliente");
        // Em app real, aqui teria interface para selecionar/excluir.
        // Para simulação, vamos demonstrar funções abaixo.
    }

    // Excluir salão (e todos os agendamentos relacionados)
    excluirSalaoPorNome(nomeSalao) {
        const idx = this.saloes.findIndex(s => s.nome === nomeSalao);
        if (idx === -1) {
            console.log(`Salão "${nomeSalao}" não encontrado.`);
            return;
        }
        const salaoRemovido = this.saloes.splice(idx, 1)[0];
        // Remove agendamentos relacionados
        const agAntes = this.agendamentos.length;
        this.agendamentos = this.agendamentos.filter(a => a.salao !== salaoRemovido);
        const agDepois = this.agendamentos.length;
        console.log(`Salão "${nomeSalao}" e ${agAntes - agDepois} agendamento(s) removidos.`);
    }

    // Excluir cliente (remove todos os agendamentos deste cliente)
    excluirClientePorWhatsapp(whatsappCliente) {
        const agAntes = this.agendamentos.length;
        this.agendamentos = this.agendamentos.filter(a => a.clienteWhatsapp !== whatsappCliente);
        const agDepois = this.agendamentos.length;
        console.log(`Cliente com WhatsApp "${whatsappCliente}" removido de ${agAntes - agDepois} agendamento(s).`);
    }

    // Utilitário para obter o ano e semana no formato YYYY-WW
    getAnoSemana(dataStr) {
        // dataStr: "YYYY-MM-DD"
        const data = new Date(dataStr);
        const ano = data.getFullYear();
        // Semana do ano (ISO)
        const primeiroDiaAno = new Date(data.getFullYear(), 0, 1);
        const dias = Math.floor((data - primeiroDiaAno) / (24 * 60 * 60 * 1000));
        const semana = Math.ceil((dias + primeiroDiaAno.getDay() + 1) / 7);
        return `${ano}-S${semana}`;
    }

    // NOVO: Função de busca (aba de procura)
    procurarSaloes({nome, servico, cidade, funcionario, funcao}) {
        // Busca salões não ocultos que batam com os critérios
        let resultados = this.saloes.filter(s => !s.oculto);

        if (nome && nome.trim() !== "") {
            const nomeLower = nome.trim().toLowerCase();
            resultados = resultados.filter(s => s.nome.toLowerCase().includes(nomeLower));
        }
        if (servico && servico.trim() !== "") {
            const servicoLower = servico.trim().toLowerCase();
            resultados = resultados.filter(s => 
                s.servicos.some(serv => serv.nome.toLowerCase().includes(servicoLower))
            );
        }
        if (cidade && cidade.trim() !== "") {
            const cidadeLower = cidade.trim().toLowerCase();
            resultados = resultados.filter(s => s.cidade && s.cidade.toLowerCase().includes(cidadeLower));
        }
        if (funcionario && funcionario.trim() !== "") {
            const funcionarioLower = funcionario.trim().toLowerCase();
            resultados = resultados.filter(s => 
                s.funcionarios.some(f => f.nome.toLowerCase().includes(funcionarioLower))
            );
        }
        // NOVO: busca por função (ex: masculino, feminino, corte de cabelo, etc)
        if (funcao && funcao.trim() !== "") {
            const funcaoLower = funcao.trim().toLowerCase();
            resultados = resultados.filter(s =>
                s.servicos.some(serv =>
                    serv.funcoes &&
                    serv.funcoes.some(f => f.toLowerCase().includes(funcaoLower))
                )
            );
        }
        return resultados;
    }

    // NOVO: retorna lista de funções disponíveis para busca
    listarFuncoesDisponiveis() {
        return this.funcoesDisponiveis;
    }
}

// Simulação de interface com dois botões e uma aba de procura
function mostrarMenu() {
    console.log("Bem-vindo ao App de Agendamento de Salão de Beleza!");
    console.log("Escolha uma opção:");
    console.log("1 - Cliente");
    console.log("2 - Salão");
    console.log("3 - Controle do Aplicativo (Admin)");
    console.log("4 - Procurar Salão (Aba de Procura)");
    // Aqui, em um app real, seriam botões. No console, é por prompt.
    // Para simulação, use prompt() se disponível, ou defina manualmente.
}

// Funções para cada botão
function menuCliente(sistema) {
    console.log("=== Área do Cliente ===");

    // Simulação de localização do usuário
    // Em app real, usaria geolocalização do navegador/dispositivo
    // Aqui, vamos simular cidade e/ou coordenadas
    const cidadeUsuario = "São Paulo";
    const latitudeUsuario = -23.55052;
    const longitudeUsuario = -46.633308;

    // Buscar salões na cidade do usuário
    let saloes = sistema.listarSaloesPorCidade(cidadeUsuario);

    // Se não houver salões na cidade, buscar por proximidade (raio de 10km)
    if (saloes.length === 0) {
        saloes = sistema.listarSaloesProximos(latitudeUsuario, longitudeUsuario, 10);
        if (saloes.length > 0) {
            console.log(`Salões próximos a você (raio de 10km):`);
        }
    } else {
        console.log(`Salões disponíveis em ${cidadeUsuario}:`);
    }

    if (saloes.length === 0) {
        console.log("Nenhum salão cadastrado na sua cidade ou próximo.");
        // ATUALIZAÇÃO: Orienta o cliente a usar a aba de procura para buscar salões em outras cidades
        console.log("Você pode buscar salões em outras cidades usando a Aba de Procura!");
        return;
    }

    saloes.forEach((s, i) => {
        let localInfo = "";
        if (s.latitude != null && s.longitude != null) {
            localInfo = ` [Localização: (${s.latitude}, ${s.longitude})]`;
        }
        console.log(`${i + 1} - ${s.nome} (${s.endereco})${localInfo}`);
        if (s.fotoPropaganda) {
            console.log(`    Foto de Propaganda: ${s.fotoPropaganda}`);
        }
    });

    // Simulação: seleciona o primeiro salão
    const salao = saloes[0];
    console.log(`Serviços do salão ${salao.nome}:`);
    salao.servicos.forEach((serv, i) => {
        console.log(`${i + 1} - ${serv.nome} | R$${serv.preco} | ${serv.duracao}min`);
        if (serv.foto) {
            console.log(`    Foto do Serviço: ${serv.foto}`);
        }
        if (serv.funcoes && serv.funcoes.length > 0) {
            console.log(`    Funções: ${serv.funcoes.join(", ")}`);
        }
    });
    // Mostrar todos os funcionários
    if (salao.funcionarios.length > 0) {
        console.log("Funcionários disponíveis:");
        salao.funcionarios.forEach((f, i) => {
            console.log(`- [${i + 1}] ${f.nome}`);
        });
    }
    // Simulação: seleciona o primeiro serviço e funcionário
    if (salao.servicos.length === 0 || salao.funcionarios.length === 0) {
        console.log("Serviços ou funcionários não cadastrados.");
        return;
    }
    const servico = salao.servicos[0];
    const funcionario = salao.funcionarios[0];
    const data = "2024-06-10";
    const horario = salao.horarios[0] || "09:00";
    const cliente = "Ana";
    const clienteWhatsapp = "+5511999999999";
    try {
        const agendamento = sistema.agendarServico(
            cliente,
            clienteWhatsapp,
            salao,
            servico,
            funcionario,
            data,
            horario
        );
        // O restante do fluxo (pagamento, notificação, aceitação) é tratado dentro de agendarServico
    } catch (e) {
        console.log(e.message);
    }
}

// ATUALIZAÇÃO: Função para clientes de qualquer cidade agendarem usando a aba de procura
function menuClienteAbaProcura(sistema) {
    console.log("=== Área do Cliente - Aba de Procura ===");
    // Exibe funções disponíveis para busca
    const funcoes = sistema.listarFuncoesDisponiveis();
    console.log("Funções disponíveis para busca:");
    funcoes.forEach((f, i) => {
        console.log(`  [${i + 1}] ${f}`);
    });

    // Simulação de busca por cidade diferente da localização do cliente
    // Exemplo: Cliente está em "São Paulo" mas quer agendar em "Campinas"
    const buscaCidade = "Campinas";
    const buscaServico = "";
    const buscaNome = "";
    const buscaFuncionario = "";
    const buscaFuncao = "";

    let resultados = sistema.procurarSaloes({
        nome: buscaNome,
        servico: buscaServico,
        cidade: buscaCidade,
        funcionario: buscaFuncionario,
        funcao: buscaFuncao
    });

    if (resultados.length === 0) {
        console.log(`Nenhum salão encontrado em ${buscaCidade}.`);
        return;
    }

    console.log(`Salões encontrados em ${buscaCidade}:`);
    resultados.forEach((s, i) => {
        let localInfo = "";
        if (s.latitude != null && s.longitude != null) {
            localInfo = ` [Localização: (${s.latitude}, ${s.longitude})]`;
        }
        console.log(`${i + 1} - ${s.nome} (${s.endereco})${localInfo}`);
        if (s.fotoPropaganda) {
            console.log(`    Foto de Propaganda: ${s.fotoPropaganda}`);
        }
    });

    // Simulação: seleciona o primeiro salão encontrado
    const salao = resultados[0];
    console.log(`Serviços do salão ${salao.nome}:`);
    salao.servicos.forEach((serv, i) => {
        console.log(`${i + 1} - ${serv.nome} | R$${serv.preco} | ${serv.duracao}min`);
        if (serv.foto) {
            console.log(`    Foto do Serviço: ${serv.foto}`);
        }
        if (serv.funcoes && serv.funcoes.length > 0) {
            console.log(`    Funções: ${serv.funcoes.join(", ")}`);
        }
    });
    // Mostrar todos os funcionários
    if (salao.funcionarios.length > 0) {
        console.log("Funcionários disponíveis:");
        salao.funcionarios.forEach((f, i) => {
            console.log(`- [${i + 1}] ${f.nome}`);
        });
    }
    // Simulação: seleciona o primeiro serviço e funcionário
    if (salao.servicos.length === 0 || salao.funcionarios.length === 0) {
        console.log("Serviços ou funcionários não cadastrados.");
        return;
    }
    const servico = salao.servicos[0];
    const funcionario = salao.funcionarios[0];
    const data = "2024-06-12";
    const horario = salao.horarios[0] || "09:00";
    const cliente = "Carlos";
    const clienteWhatsapp = "+5511988888888";
    try {
        const agendamento = sistema.agendarServico(
            cliente,
            clienteWhatsapp,
            salao,
            servico,
            funcionario,
            data,
            horario
        );
        // O restante do fluxo (pagamento, notificação, aceitação) é tratado dentro de agendarServico
    } catch (e) {
        console.log(e.message);
    }
}

function menuSalao(sistema) {
    console.log("=== Área do Salão ===");
    // Simulação de cadastro de salão
    const nome = "Beleza Pura";
    const endereco = "Rua das Flores, 123";
    const whatsapp = "+5511888888888";
    const cidade = "São Paulo";
    const latitude = -23.55052;
    const longitude = -46.633308;
    const salao = sistema.cadastrarSalao(nome, endereco, whatsapp, cidade, latitude, longitude);
    console.log(`Salão cadastrado: ${salao.nome}, ${salao.endereco}, WhatsApp: ${salao.whatsapp}, Cidade: ${cidade}`);

    // Cadastro de foto de propaganda do salão
    salao.setFotoPropaganda("https://exemplo.com/foto-salao-belezapura.jpg");

    // Cadastro de serviços com funções
    const corteMasc = new Servico("Corte de Cabelo Masculino", 50, 30, ["masculino", "corte de cabelo"]);
    corteMasc.setFoto("https://exemplo.com/foto-corte-masc.jpg");
    const corteFem = new Servico("Corte de Cabelo Feminino", 60, 40, ["feminino", "corte de cabelo"]);
    corteFem.setFoto("https://exemplo.com/foto-corte-fem.jpg");
    const manicure = new Servico("Manicure", 30, 40, ["unha", "unha em gel"]);
    manicure.setFoto("https://exemplo.com/foto-manicure.jpg");
    const cilios = new Servico("Extensão de Cílios", 80, 60, ["cílios"]);
    cilios.setFoto("https://exemplo.com/foto-cilios.jpg");
    const escova = new Servico("Escova", 40, 45, ["escova", "feminino"]);
    escova.setFoto("https://exemplo.com/foto-escova.jpg");
    const massagem = new Servico("Massagem Relaxante", 100, 60, ["massagem"]);
    massagem.setFoto("https://exemplo.com/foto-massagem.jpg");
    const depilacao = new Servico("Depilação", 50, 30, ["depilação", "feminino"]);
    depilacao.setFoto("https://exemplo.com/foto-depilacao.jpg");
    salao.adicionarServico(corteMasc);
    salao.adicionarServico(corteFem);
    salao.adicionarServico(manicure);
    salao.adicionarServico(cilios);
    salao.adicionarServico(escova);
    salao.adicionarServico(massagem);
    salao.adicionarServico(depilacao);

    // Cadastro de funcionários
    const joana = new Funcionario("Joana");
    joana.adicionarServico(corteFem);
    joana.adicionarServico(manicure);
    joana.adicionarServico(escova);
    joana.adicionarServico(depilacao);
    const maria = new Funcionario("Maria");
    maria.adicionarServico(manicure);
    maria.adicionarServico(cilios);
    maria.adicionarServico(massagem);
    const paulo = new Funcionario("Paulo");
    paulo.adicionarServico(corteMasc);
    paulo.adicionarServico(massagem);
    salao.adicionarFuncionario(joana);
    salao.adicionarFuncionario(maria);
    salao.adicionarFuncionario(paulo);

    // Cadastro de horários disponíveis
    salao.adicionarHorario("09:00");
    salao.adicionarHorario("10:00");
    salao.adicionarHorario("11:00");

    // Cadastro de gastos simulados
    salao.adicionarGasto("Aluguel", 1000, "2024-06-01");
    salao.adicionarGasto("Produtos de Beleza", 300, "2024-06-05");
    salao.adicionarGasto("Conta de Luz", 200, "2024-06-07");

    // Simulação de ocultar/exibir salão
    // salao.ocultarSalao(); // Para ocultar
    // salao.exibirSalao();  // Para exibir novamente

    console.log("Serviços, funcionários, horários, foto de propaganda, localização e gastos cadastrados com sucesso!");

    // ATUALIZAÇÃO: Cadastra um salão em outra cidade para simular busca e agendamento de clientes de outras cidades
    const nome2 = "Estética Campinas";
    const endereco2 = "Av. Brasil, 456";
    const whatsapp2 = "+5511777777777";
    const cidade2 = "Campinas";
    const latitude2 = -22.90556;
    const longitude2 = -47.06083;
    const salao2 = sistema.cadastrarSalao(nome2, endereco2, whatsapp2, cidade2, latitude2, longitude2);
    salao2.setFotoPropaganda("https://exemplo.com/foto-salao-campinas.jpg");
    const corteMasc2 = new Servico("Corte de Cabelo Masculino", 55, 35, ["masculino", "corte de cabelo"]);
    corteMasc2.setFoto("https://exemplo.com/foto-corte-masc-campinas.jpg");
    const manicure2 = new Servico("Manicure", 35, 45, ["unha", "unha em gel"]);
    manicure2.setFoto("https://exemplo.com/foto-manicure-campinas.jpg");
    salao2.adicionarServico(corteMasc2);
    salao2.adicionarServico(manicure2);
    const ana = new Funcionario("Ana");
    ana.adicionarServico(corteMasc2);
    ana.adicionarServico(manicure2);
    salao2.adicionarFuncionario(ana);
    salao2.adicionarHorario("14:00");
    salao2.adicionarHorario("15:00");
    salao2.adicionarGasto("Aluguel", 900, "2024-06-01");
    salao2.adicionarGasto("Produtos", 250, "2024-06-05");
    console.log("Salão em outra cidade cadastrado para simulação de clientes de outras cidades!");
}

// Função para simular menu admin
function menuAdmin(sistema) {
    sistema.paginaControleAdmin();

    // Simulação de exclusão de salão
    // Exemplo: Excluir salão "Beleza Pura"
    // sistema.excluirSalaoPorNome("Beleza Pura");

    // Simulação de exclusão de cliente
    // Exemplo: Excluir cliente com WhatsApp "+5511999999999"
    // sistema.excluirClientePorWhatsapp("+5511999999999");
}

// NOVO: Função para simular a aba de procura
function menuProcura(sistema) {
    console.log("=== Aba de Procura ===");
    // Exibe funções disponíveis para busca
    const funcoes = sistema.listarFuncoesDisponiveis();
    console.log("Funções disponíveis para busca:");
    funcoes.forEach((f, i) => {
        console.log(`  [${i + 1}] ${f}`);
    });

    // Simulação de busca por nome, serviço, cidade, funcionário ou função
    // Em app real, seriam campos de texto para o usuário preencher
    // Aqui, vamos simular algumas buscas

    // Exemplo 1: Procurar por nome do salão
    let resultados = sistema.procurarSaloes({nome: "Beleza", servico: "", cidade: "", funcionario: "", funcao: ""});
    console.log("\nBusca por nome 'Beleza':");
    if (resultados.length === 0) {
        console.log("Nenhum salão encontrado.");
    } else {
        resultados.forEach((s, i) => {
            console.log(`${i + 1} - ${s.nome} (${s.endereco}) [Cidade: ${s.cidade}]`);
        });
    }

    // Exemplo 2: Procurar por serviço
    resultados = sistema.procurarSaloes({nome: "", servico: "Manicure", cidade: "", funcionario: "", funcao: ""});
    console.log("\nBusca por serviço 'Manicure':");
    if (resultados.length === 0) {
        console.log("Nenhum salão encontrado.");
    } else {
        resultados.forEach((s, i) => {
            console.log(`${i + 1} - ${s.nome} (${s.endereco}) [Cidade: ${s.cidade}]`);
        });
    }

    // Exemplo 3: Procurar por cidade
    resultados = sistema.procurarSaloes({nome: "", servico: "", cidade: "São Paulo", funcionario: "", funcao: ""});
    console.log("\nBusca por cidade 'São Paulo':");
    if (resultados.length === 0) {
        console.log("Nenhum salão encontrado.");
    } else {
        resultados.forEach((s, i) => {
            console.log(`${i + 1} - ${s.nome} (${s.endereco}) [Cidade: ${s.cidade}]`);
        });
    }

    // Exemplo 4: Procurar por funcionário
    resultados = sistema.procurarSaloes({nome: "", servico: "", cidade: "", funcionario: "Joana", funcao: ""});
    console.log("\nBusca por funcionário 'Joana':");
    if (resultados.length === 0) {
        console.log("Nenhum salão encontrado.");
    } else {
        resultados.forEach((s, i) => {
            console.log(`${i + 1} - ${s.nome} (${s.endereco}) [Cidade: ${s.cidade}]`);
        });
    }

    // Exemplo 5: Procurar por função (ex: masculino)
    resultados = sistema.procurarSaloes({nome: "", servico: "", cidade: "", funcionario: "", funcao: "masculino"});
    console.log("\nBusca por função 'masculino':");
    if (resultados.length === 0) {
        console.log("Nenhum salão encontrado.");
    } else {
        resultados.forEach((s, i) => {
            console.log(`${i + 1} - ${s.nome} (${s.endereco}) [Cidade: ${s.cidade}]`);
        });
    }

    // Exemplo 6: Procurar por função (ex: unha em gel)
    resultados = sistema.procurarSaloes({nome: "", servico: "", cidade: "", funcionario: "", funcao: "unha em gel"});
    console.log("\nBusca por função 'unha em gel':");
    if (resultados.length === 0) {
        console.log("Nenhum salão encontrado.");
    } else {
        resultados.forEach((s, i) => {
            console.log(`${i + 1} - ${s.nome} (${s.endereco}) [Cidade: ${s.cidade}]`);
        });
    }
}

// Execução simulada
const sistema = new SistemaAgendamento();
mostrarMenu();

// Simulação de clique nos botões:
// Para testar, chame menuSalao(sistema) para cadastrar um salão, depois menuCliente(sistema) para agendar.
menuSalao(sistema);    // Simula clique no botão "Salão"
menuCliente(sistema);  // Simula clique no botão "Cliente"

// NOVO: Simula acesso à página de controle do salão cadastrado
const salao = sistema.saloes[0];
if (salao) {
    sistema.paginaControleSalao(salao);
}

// NOVÍSSIMO: Simula acesso à página de controle do aplicativo (admin)
menuAdmin(sistema);

// NOVO: Simula acesso à aba de procura
menuProcura(sistema);

// ATUALIZAÇÃO: Simula cliente de outra cidade agendando usando a aba de procura
menuClienteAbaProcura(sistema);
// Observação: Este é um comentário informativo sobre multiplataforma.
// O código acima é JavaScript e pode ser adaptado para uso em Android, iOS e Web utilizando frameworks como React Native (para Android/iOS) e React.js (para Web).
// Para transformar este aplicativo em multiplataforma, considere migrar a lógica para componentes e telas React Native/React, utilizando bibliotecas como Expo para facilitar o desenvolvimento e deploy em Android, iOS e Web.









